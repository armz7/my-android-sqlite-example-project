#summary Some examples of the project code

= getWritableDatabase method in extended SQLiteOpenHelper class =

{{{
/**
   * Create and/or open a database that will be used for reading and writing.
   * Once opened successfully, the database is cached, so you can call this
   * method every time you need to write to the database. Make sure to call
   * close() when you no longer need it.
   * 
   * Errors such as bad permissions or a full disk may cause this operation to
   * fail, but future attempts may succeed if the problem is fixed.
   * 
   * Returns a read/write database object valid until close() is called
   * 
   * Throws SQLiteException if the database cannot be opened for writing
   */

  @Override
  public SQLiteDatabase getWritableDatabase() throws SQLiteException {
    try {
      this.mDb = SQLiteDatabase.openDatabase(this.dbPathToUse + File.separator
          + MyAppDbAdapter.MY_DATABASE_NAME, null,
          SQLiteDatabase.OPEN_READWRITE);

      return this.mDb;
    } catch (SQLException error) {
      MyErrorLog<SQLException> errExcpError = new MyErrorLog<SQLException>(
          this.mCtx);
      errExcpError.addToLogFile(error, "MyAppDbAdapter.getWritableDatabase",
          "SQLException - main try/catch");
      errExcpError = null;

      return null;
    }// end try/catch (SQLException error)
    catch (Exception error) {
      MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(this.mCtx);
      errExcpError.addToLogFile(error, "MyAppDbAdapter.getWritableDatabase",
          "main try/catch");
      errExcpError = null;

      return null;
    }// end try/catch (Exception error)
  }// end getWriteableDatabase
}}}


= List Activity onResume Method =

{{{
/**
   * Called after onRestoreInstanceState(Bundle), onRestart(), or onPause(), for
   * your activity to start interacting with the user.
   * 
   * This is a good place to begin animations, open exclusive-access devices
   * (such as the camera), etc.
   * 
   * the data is refreshed
   * 
   */
  @Override
  protected void onResume() {
    /* query sorting options */
    super.onResume();
    try {
      if (this.blSaveNew == true) {
        // call the entry activity again
        this.blSaveNew = false;
        Intent intentInsrt = new Intent(Music_List.this, AddEditMusic.class);
        intentInsrt.putExtra("SHOW_SAVENEW", true);
        startActivityForResult(intentInsrt, ACTIVITY_CREATE);

        return;
      }// end if (blSaveNew == true)

      //set database query class object
      this.dbAppDbObj = new MyAppDbSQL(this);
      
      Music_List.getSortOption(Music_List.this);

      this.fillData();

      this.registerForContextMenu(this.getListView());
    } catch (Exception error) {
      MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(
          Music_List.this);
      errExcpError.addToLogFile(error, "Music_List.resumeData", "");
      errExcpError = null;
    }// end try/catch (Exception error)
  }// end onResume
}}}

= MyDisplayAlert Class =

{{{
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;

public class MyDisplayAlertClass extends AlertDialog.Builder{
  private Context ctxContext;
  private final String strMyTitle;
  private final String strMyMsg;
  private CustAlrtMsgOptnListener objOptnListener;
  private final int intPosButton_id;
  private final int intNegButton_id;
  private boolean blIsConfirmationAlert;
  private DialogInterface.OnClickListener myDialogClickListener;
  private AlertDialog alrtMsgBox;

  /**
   * Result Interface - implemented in calling class to handle class-specific
   * alert option selection
   * 
   * @param ctx
   *          the Context within which to work
   */
  public interface CustAlrtMsgOptnListener {
    public void custEventHandler(int iResultCode);
  }// end ResultListener

  /**
   * Constructor - takes the context to allow the database to be opened/created
   * 
   * @param ctx
   *          the Context within which to work
   */
  MyDisplayAlertClass(final Context ctx, CustAlrtMsgOptnListener optnListener,
      String prmMyTitle, String prmMyMsg) {
    super(ctx);
    // this.ctxContext = ctx;
    this.strMyTitle = prmMyTitle;
    this.strMyMsg = prmMyMsg;
    this.objOptnListener = optnListener;
    this.blIsConfirmationAlert = false;
    this.intPosButton_id = 0;
    this.intNegButton_id = 0;

    myDialogClickListener = new DialogInterface.OnClickListener() {
      @Override
      public void onClick(DialogInterface dialog, int which) {
        try {
          switch (which) {
          case DialogInterface.BUTTON_POSITIVE:
            // Yes/Ok button clicked
            objOptnListener.custEventHandler(which);
            dialog.dismiss();
            break;

          case DialogInterface.BUTTON_NEGATIVE:
            // No button clicked
            objOptnListener.custEventHandler(which);
            dialog.dismiss();
            break;
          }// end switch
        } catch (Exception error) {
          MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(
              ctxContext);
          errExcpError.addToLogFile(error, "MyDisplayAlertClass.DialogInterface", "no alert");
          errExcpError = null;
        }// end try/catch (Exception error)
      }// end onClick
    };// end DialogInterface.OnClickListener()

    alrtMsgBox = this.setAlertMsg(prmMyTitle, prmMyMsg);
  }// end constructor

  MyDisplayAlertClass(final Context baseContext,
      CustAlrtMsgOptnListener custAlrtMsgOptnListener, final int prmMyTitle,
      final int prmMyMsg, final int prmPosButton_id, final int prmNegButton_id) {
    super(baseContext);
    this.intPosButton_id = prmPosButton_id;
    this.intNegButton_id = prmNegButton_id;
    this.ctxContext = baseContext;
    this.strMyTitle = this.ctxContext.getString(prmMyTitle);
    this.strMyMsg = this.ctxContext.getString(prmMyMsg);
    this.blIsConfirmationAlert = true;
    this.objOptnListener = custAlrtMsgOptnListener;

    myDialogClickListener = new DialogInterface.OnClickListener() {
      @Override
      public void onClick(DialogInterface dialog, int which) {
        try {
          switch (which) {
          case DialogInterface.BUTTON_POSITIVE:
            // Yes/Ok button clicked
            objOptnListener.custEventHandler(which);
            dialog.dismiss();
            break;

          case DialogInterface.BUTTON_NEGATIVE:
            // No button clicked
            objOptnListener.custEventHandler(which);
            dialog.dismiss();
            break;
          }// end switch
        } catch (Exception error) {
          MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(
              ctxContext);
          errExcpError.addToLogFile(error, "MyDisplayAlertClass.DialogInterface", "confirmation alert");
          errExcpError = null;
        }// end try/catch (Exception error)
      }// end onClick
    };// end DialogInterface.OnClickListener()

    alrtMsgBox = this.setAlertMsg(this.strMyTitle, this.strMyMsg);
  }// end constructor

  /**
   * displayAlert: Code to populate Alert Messages in an "Ok" dialog display.
   * 
   * @param String
   *          myTitle - title of the message
   * @param String
   *          myMsg - content of the alert message
   * 
   * @return void
   * 
   */
  private AlertDialog setAlertMsg(String prmMyTitle, String prmMyMsg) {
    try {
      setTitle(prmMyTitle);
      this.setMessage(prmMyMsg);
      this.setCancelable(true);
      
      if (this.blIsConfirmationAlert == false){
        this.setPositiveButton("Ok", myDialogClickListener);
      } else{
        this.setPositiveButton(this.intPosButton_id, myDialogClickListener);
        this.setNegativeButton(this.intNegButton_id, myDialogClickListener);
      }

      return this.show();
    }// end try
    catch (Exception error) {
      MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(
          ctxContext);
      errExcpError.addToLogFile(error, "MyDisplayAlertClass.setAlertMsg", "no alert");
      errExcpError = null;
      return null;
    }// end try/catch (Exception error)
  }// end setAlertMsg

  protected void cleanUpClassVars() {
    // ctxContext = null;
    // objOptnListener = null;
    // myDialogClickListener = null;
    try {
      if (this.alrtMsgBox != null) {
        this.alrtMsgBox.dismiss();
        this.alrtMsgBox = null;
      }
      if (this.objOptnListener != null) {
        this.objOptnListener = null;
      }
    } catch (Exception error) {
      MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(
          ctxContext);
      errExcpError.addToLogFile(error, "MyDisplayAlertClass.cleanUpClassVars", "");
      errExcpError = null;
    }// end try/catch (Exception error)
  }//end cleanUpClassVars
}// end MyDisplayAlertClass
}}}

= CustAlrtMsgOptnListener Class =

{{{
import android.content.Context;
import android.content.DialogInterface;
import android.view.MenuItem;

//Alert Dialog Result Event Handler
public class CustAlrtMsgOptnListener implements
    MyDisplayAlertClass.CustAlrtMsgOptnListener {
  private final MessageCodes iWhichMessage;
  private final Context ctxPassedContext;

  CustAlrtMsgOptnListener(final MessageCodes iParmEventType) {
    this.iWhichMessage = (MessageCodes) iParmEventType;
    this.ctxPassedContext = null;
  }// end constructor

  CustAlrtMsgOptnListener(final Context ctx, final MessageCodes iParmEventType) {
    this.iWhichMessage = (MessageCodes) iParmEventType;
    this.ctxPassedContext = ctx;
  }// end constructor

  CustAlrtMsgOptnListener(final Context ctx, final MessageCodes iParmEventType,
      final MenuItem menuItem) {
    this.iWhichMessage = (MessageCodes) iParmEventType;
    this.ctxPassedContext = ctx;
  }// end constructor

  /** Message codes. */
  public enum MessageCodes {
    /** reserved for AlertMessage --> does nothing */
    ALERT_TYPE_MSG,
    /** Clear the password info. */
    CLEAR_PASSWORDINFO_CONFIRMATION_MESSAGE,
  }//

  @Override
  public void custEventHandler(int iButtonType) {
    try {
      switch (iButtonType) {
      case DialogInterface.BUTTON_POSITIVE:
        switch (iWhichMessage) {
        case ALERT_TYPE_MSG:
          // nothing to do for alert messages
          break;

        default:
          break;
        }// end switch(iEventType)
        break;

      case DialogInterface.BUTTON_NEGATIVE:
        // nothing to do
        break;
      default:
        break;
      }// end switch(iResultCd)
    } catch (Exception error) {
      MyErrorLog<Exception> errExcpError = new MyErrorLog<Exception>(
          CustAlrtMsgOptnListener.this.ctxPassedContext);
      errExcpError.addToLogFile(error,
          "CustAlrtMsgOptnListener.custEventHandler", "");
      errExcpError = null;
    }// end try/catch (Exception error)
    return;
  }// end public void custEventHandler(int iButtonType)
}// end CustAlrtMsgOptnListener
}}}